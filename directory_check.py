import os
import json
import hashlib
import argparse
import puremagic
from tqdm import tqdm
from diario import Diario


def arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("path",
                        type=str,
                        help='specify path of file to analyze')
    args = parser.parse_args()
    if args.path is None:
        print(parser.print_usage)
        exit(0)
    else:
        return args.path


def check(data):
    api = Diario('API - ID', 'API - SECRETS')
    result = api.search(data[1])
    if result.error is None:
        return result.data
    elif result.json['error']['code'] == 406:
        api.upload(data[0])
        result = {'prediction': 'U', 'status': 'Q', 'sha256': data[1]}
        return result

    else:
        result = {'prediction': 'E'}
        return result


def file_result(results, directory):
    results_json = json.dumps(results, ensure_ascii=False)
    with open(directory + '.json', 'w') as file:
        file.write(results_json)


def csv_result(csv, directory):
    csv_file = open(directory, "w")
    for line in csv:
        csv_file.write(line)
        csv_file.write("\n")
    csv_file.close()


def list_hash(file):
    hashes = []
    with open(file) as data:
        for line in data.readlines():
            par = (line.split(' ')[-1].split('\n')[0], line.split(' ')[0])
            hashes.append(par)

    return hashes


def get_hash(path):
    with open(path, "rb") as f:
        fbytes = f.read()
        sha256 = hashlib.sha256(fbytes).hexdigest()
        par = (path, sha256)
    return par


def identify_files(path):
    det_files = []
    types = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
             'xlsx', '.wb3', 'docx', 'pptx']
    for root, dirs, files in os.walk(path):
        for file in files:
            try:
                filetype = puremagic.from_file(os.path.join(root, file))
                if filetype in types:
                    det_files.append(os.path.join(root, file))
            except:
                pass
    return det_files


def main():
    results = {}
    hashes = []
    path = arguments()
    if os.path.isfile(path):
        hashes = list_hash(path)
    elif os.path.isdir(path):
        files = identify_files(path)
        for file in files:
            hashes.append(get_hash(file))
    else:
        print('No detect file')

    for data in tqdm(hashes):
        resp = check(data)
        if resp['prediction'] == 'M' or resp['prediction'] == 'U':
            results[data[0]] = resp

    csv = []
    for h in list(results.keys()):
        print(h.split(os.sep)[-2] + ';' + h.split(os.sep)[-1] + ';' +
              results[h]['prediction'] + ';' + results[h]['sha256'])
        csv.append(h.split(os.sep)[-2] + ';' + h.split(os.sep)[-1] + ';' +
                   results[h]['prediction'] + ';' + results[h]['sha256'])

    if os.path.isfile(path):
        file_result(results, path)
    elif os.path.isdir(path):
        file_result(results, path + os.sep + 'detect')
        csv_result(csv, path + os.sep + 'csv_detect.csv')


if __name__ == '__main__':
    main()
